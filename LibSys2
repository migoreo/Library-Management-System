#include <iostream>
#include <fstream>
#include <ctime>
#include <string>

#ifdef _WIN32
#include <windows.h>
#else
#define CLEAR_SCREEN std::cout << "\033[2J\033[1;1H";
#endif

const std::string ADMINUSER = "admin";                // Example admin username
const std::string ADMINPASSWORD = "password";         // Example admin password
const std::string USER = "student";                   // Example student username
const std::string USERPASSWORD = "pass";              // Example student password

void addBook();
void deleteBook();
void updateBook();
void listOfAllBooks();
void borrowBook();
void returnBook();

int main()
{
    int outerChoice = 0;

    while (outerChoice != 3)
    {
        CLEAR_SCREEN

        std::cout << "\n\n Library Management System \n\n";
        std::cout << "\n1. Librarian";
        std::cout << "\n2. Student";
        std::cout << "\n9. Exit";
        std::cout << "\n\nEnter your choice: ";
        std::cin >> outerChoice;

        if (outerChoice == 1)
        {
            std::string adminUser;
            std::string adminPassword;

            CLEAR_SCREEN
            std::cout << "\n========================================== TEACHER LOGIN ==========================================";
            std::cout << "\n\n Please enter your username: ";
            std::cin >> adminUser;
            std::cout << "\n Please enter your password: ";
            std::cin >> adminPassword;

            if (adminUser == ADMINUSER && adminPassword == ADMINPASSWORD)
            {
                std::cin.ignore();
                std::cin.get();

                CLEAR_SCREEN
                int innerChoice = 0;

                while (innerChoice != 3)
                {
                    std::cout << "\n\n Librarian login is successful!! Press any button to continue..";
                    std::cout << "\n1. Add new book";
                    std::cout << "\n2. Update any Book";
                    std::cout << "\n3. Delete Book";
                    std::cout << "\n4. List of all Books";
                    std::cout << "\n9. Exit";
                    std::cout << "\n\n Please enter your choice: ";
                    std::cin >> innerChoice;

                    switch (innerChoice)
                    {
                        case 1:
                            addBook();
                            break;
                        case 2:
                            updateBook();
                            break;
                        case 3:
                            deleteBook();
                            break;
                        case 4:
                            listOfAllBooks();
                            break;
                        default:
                            std::cout << "\n\n Invalid Choice. Please enter a valid one";
                            std::cin.ignore();
                            std::cin.get();
                            break;
                    }

                    CLEAR_SCREEN
                }
            }
            else
            {
                std::cout << "\n\n Error: Invalid Credentials. Please check your credentials";
                std::cin.ignore();
                std::cin.get();
            }
        }
        else if (outerChoice == 2)
        {
            std::string studentUser;
            std::string studentPassword;

            CLEAR_SCREEN
            std::cout << "\n========================================== Student Login ==========================================";
            std::cout << "\n\n Please enter your username: ";
            std::cin >> studentUser;
            std::cout << "\n Please enter your password: ";
            std::cin >> studentPassword;

            if (studentUser == USER && studentPassword == USERPASSWORD)
            {
                int innerChoice = 0;

                while (innerChoice != 3)
                {
                    CLEAR_SCREEN
                    std::cout << "\n\n Student login is successful!! Press any button to continue..";
                    std::cout << "\n1. Borrow Book";
                    std::cout << "\n2. Return Book";
                    std::cout << "\n9. Exit";
                    std::cout << "\n\n Please enter your choice: ";
                    std::cin >> innerChoice;

                    switch (innerChoice)
                    {
                        case 1:
                            borrowBook();
                            break;
                        case 2:
                            returnBook();
                            break;
                        default:
                            std::cout << "\n\n Invalid Choice. Please enter a valid one";
                            std::cin.ignore();
                            std::cin.get();
                            break;
                    }

                    CLEAR_SCREEN
                }
            }
            else
            {
                std::cout << "\n\n Error: Invalid Credentials. Please check your credentials";
                std::cin.ignore();
                std::cin.get();
            }
        }
        else if (outerChoice != 3)
        {
            std::cout << "\n\n Invalid Choice. Please enter a valid one";
            std::cin.ignore();
            std::cin.get();
        }
    }

    return 0;
}

void addBook()
{
    CLEAR_SCREEN

    std::cout << "\n========================================= ADD NEW BOOK =========================================";
    std::cout << "\n\nEnter book ID: ";
    int bookId;
    std::cin >> bookId;
    std::cin.ignore();

    // Add validation for book ID if desired

    std::string bookName;
    std::cout << "Enter book name: ";
    std::getline(std::cin, bookName);

    std::string author;
    std::cout << "Enter author name: ";
    std::getline(std::cin, author);

    std::ofstream bookFile;
    std::string filename = "books/" + std::to_string(bookId) + ".txt";
    bookFile.open(filename);

    if (!bookFile)
    {
        std::cout << "\n\n Error: Could not create the book. Please try again.";
        std::cin.ignore();
        std::cin.get();
        return;
    }

    std::time_t now = std::time(nullptr);
    std::string dateTime = std::ctime(&now);

    bookFile << "Book ID: " << bookId << std::endl;
    bookFile << "Book Name: " << bookName << std::endl;
    bookFile << "Author: " << author << std::endl;
    bookFile << "Date Created: " << dateTime << std::endl;

    bookFile.close();

    std::cout << "\n\n Book added successfully!! Press any button to continue..";
    std::cin.ignore();
    std::cin.get();
}

void deleteBook()
{
    CLEAR_SCREEN

    std::cout << "\n========================================= DELETE BOOK ==========================================";
    std::cout << "\n\nEnter book ID to delete: ";
    int bookId;
    std::cin >> bookId;

    std::string filename = "books/" + std::to_string(bookId) + ".txt";

    std::ifstream bookFile(filename);
    if (!bookFile)
    {
        std::cout << "\n\n Error: Book with ID " << bookId << " does not exist";
        std::cin.ignore();
        std::cin.get();
        return;
    }

    bookFile.close();
    if (std::remove(filename.c_str()) != 0)
    {
        std::cout << "\n\n Error: Could not delete the book. Please try again.";
        std::cin.ignore();
        std::cin.get();
        return;
    }

    std::cout << "\n\n Book deleted successfully!! Press any button to continue..";
    std::cin.ignore();
    std::cin.get();
}

void updateBook()
{
    CLEAR_SCREEN

    std::cout << "\n========================================= UPDATE BOOK ==========================================";
    std::cout << "\n\nEnter book ID to update: ";
    int bookId;
    std::cin >> bookId;

    std::string filename = "books/" + std::to_string(bookId) + ".txt";

    std::ifstream bookFile(filename);
    if (!bookFile)
    {
        std::cout << "\n\n Error: Book with ID " << bookId << " does not exist";
        std::cin.ignore();
        std::cin.get();
        return;
    }
    bookFile.close();

    std::string bookName;
    std::cout << "Enter new book name: ";
    std::cin.ignore();
    std::getline(std::cin, bookName);

    std::string author;
    std::cout << "Enter new author name: ";
    std::getline(std::cin, author);

    std::ofstream newBookFile(filename);

    if (!newBookFile)
    {
        std::cout << "\n\n Error: Could not update the book. Please try again.";
        std::cin.ignore();
        std::cin.get();
        return;
    }

    std::time_t now = std::time(nullptr);
    std::string dateTime = std::ctime(&now);

    newBookFile << "Book ID: " << bookId << std::endl;
    newBookFile << "Book Name: " << bookName << std::endl;
    newBookFile << "Author: " << author << std::endl;
    newBookFile << "Date Updated: " << dateTime << std::endl;

    newBookFile.close();

    std::cout << "\n\n Book updated successfully!! Press any button to continue..";
    std::cin.ignore();
    std::cin.get();
}

void listOfAllBooks()
{
    CLEAR_SCREEN

    std::cout << "\n========================================= LIST OF BOOKS =========================================";

    std::string filename;
    std::ifstream bookFile;
    std::string line;

    for (int bookId = 1; bookId <= 100; ++bookId)
    {
        filename = "books/" + std::to_string(bookId) + ".txt";
        bookFile.open(filename);

        if (bookFile)
        {
            std::cout << "\n\n Book ID: " << bookId << std::endl;
            while (std::getline(bookFile, line))
                std::cout << line << std::endl;

            bookFile.close();
        }
    }

    std::cout << "\n\n Press any button to continue..";
    std::cin.ignore();
    std::cin.get();
}

void borrowBook()
{
    CLEAR_SCREEN

    std::cout << "\n========================================= BORROW BOOK ==========================================";
    std::cout << "\n\nEnter book ID to borrow: ";
    int bookId;
    std::cin >> bookId;

    std::string filename = "books/" + std::to_string(bookId) + ".txt";

    std::ifstream bookFile(filename);
    if (!bookFile)
    {
        std::cout << "\n\n Error: Book with ID " << bookId << " does not exist";
        std::cin.ignore();
        std::cin.get();
        return;
    }
    bookFile.close();

    // Add your borrow logic here

    std::cout << "\n\n Book borrowed successfully!! Press any button to continue..";
    std::cin.ignore();
    std::cin.get();
}

void returnBook()
{
    CLEAR_SCREEN

    std::cout << "\n========================================= RETURN BOOK ==========================================";
    std::cout << "\n\nEnter book ID to return: ";
    int bookId;
    std::cin >> bookId;

    std::string filename = "books/" + std::to_string(bookId) + ".txt";

    std::ifstream bookFile(filename);
    if (!bookFile)
    {
        std::cout << "\n\n Error: Book with ID " << bookId << " does not exist";
        std::cin.ignore();
        std::cin.get();
        return;
    }
    bookFile.close();

    // Add your return logic here

    std::cout << "\n\n Book returned successfully!! Press any button to continue..";
    std::cin.ignore();
    std::cin.get();
}
