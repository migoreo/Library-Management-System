#include <iostream>
#include <string>
#include <fstream>
#include <ctime>

using namespace std;

const char ADMINUSER[] = "admin";
const char ADMINPASSWORD[] = "password";
const char USER[] = "student";
const char USERPASSWORD[] = "pass";

void addBook();
void deleteBook();
void updateBook();
void listOfAllBooks();
void borrowBook();
void returnBook();

int main()
{
    int outerChoice = 0;

    while (outerChoice != 9)
    {
        system("cls");

        cout << "\n\n Library Management System \n\n";
        cout << "\n1. Librarian";
        cout << "\n2. Student";
        cout << "\n9. Exit";
        cout << "\n\nEnter your choice : ";
        cin >> outerChoice;

        if (outerChoice == 1)
        {
            char adminUser[10];
            char adminPassword[10];

            system("cls");
            cout << "\n========================================== TEACHER LOGIN ========================================== ";
            cout << "\n\n Please enter your username: ";
            cin >> adminUser;
            cout << "\n Please enter your password: ";
            cin >> adminPassword;

            if ((strcmp(adminUser, ADMINUSER) == 0) && (strcmp(adminPassword, ADMINPASSWORD) == 0))
            {
                getchar();
                getchar();

                system("cls");

                int innerChoice = 0;

                while (innerChoice != 9)
                {
                    cout << "\n\n Librarian login is successful!! Press any button to continue..";
                    cout << "\n1. Add new book";
                    cout << "\n2. Update any Book";
                    cout << "\n3. Delete Book";
                    cout << "\n4. List of all Books";
                    cout << "\n9. Exit";
                    cout << "\n\n Please enter your choice : ";
                    cin >> innerChoice;

                    switch (innerChoice)
                    {
                        case 1:
                            addBook();
                            break;
                        case 2:
                            updateBook();
                            break;
                        case 3:
                            deleteBook();
                            break;
                        case 4:
                            listOfAllBooks();
                            break;
                        default:
                            cout << "\n\n Invalid Choice. Please enter the valid one";
                            getchar();
                            break;
                    }

                    system("cls");
                }
            }
            else
            {
                cout << "\n\n Error: Invalid Credentials. Please check your Credentials";
                getchar();
                getchar();
            }
        }
        else if (outerChoice == 2)
        {
            char studentUser[10];
            char studentPassword[10];

            system("cls");

            cout << "\n========================================== Student Login ==========================================";
            cout << "\n\n Please enter your username: ";
            cin >> studentUser;
            cout << "\n Please enter your password: ";
            cin >> studentPassword;

            if ((strcmp(studentUser, USER) == 0) && (strcmp(studentPassword, USERPASSWORD) == 0))
            {
                int innerChoice = 0;

                while (innerChoice != 9)
                {
                    system("cls");

                    cout << "\n1. Borrow a Book";
                    cout << "\n2. Return a Book";
                    cout << "\n3. List of All Books";
                    cout << "\n9. Exit";
                    cout << "\n\n Enter your choice : ";
                    cin >> innerChoice;

                    switch (innerChoice)
                    {
                        case 1:
                            borrowBook();
                            break;
                        case 2:
                            returnBook();
                            break;
                        case 3:
                            listOfAllBooks();
                            break;
                        case 9:
                            break;
                        default:
                            cout << "\n\n Error: Invalid Choice. Please enter the valid one";
                            getchar();
                            getchar();
                            break;
                    }
                }

                system("cls");
            }
            else
            {
                cout << "\n\n Error: Invalid Credentials. Please check your Credentials";
                getchar();
                getchar();
            }
        }
        else if (outerChoice != 9)
        {
            cout << "\n\n Invalid choice. Press any key to continue..";
            getchar();
            getchar();
        }
        else
        {
            cout << "\n\n Thank you for browsing!! Press any key to exit";
            getchar();
            getchar();
        }
    }

    return 0;
}

void addBook()
{
    int bookid;
    char bookname[20];
    char bookauthor[20];
    int fee;
    int days;

    time_t t = time(NULL);
    struct tm* tm = localtime(&t);
    int year = tm->tm_year + 1900;
    int month = tm->tm_mon + 1;
    int day = tm->tm_mday;

    system("cls");
    cout << "\n========================================== Add a new Book ==========================================";
    cout << "\n\n Please enter a 4-digit numeric id: ";
    cin >> bookid;
    cout << "\n Please enter the book name: ";
    cin.ignore(); // Ignore the newline character left in the input stream
    cin.getline(bookname, 20);
    cout << "\n Please enter the book author: ";
    cin.getline(bookauthor, 20);
    cout << "\n Please enter the late fee per day (in dollars): ";
    cin >> fee;
    cout << "\n Please enter the maximum borrowing duration (in days): ";
    cin >> days;

    char filename[20];
    sprintf(filename, "%d%s", bookid, ".dat");
    ofstream file(filename);
    file << bookname << "\n";
    file << bookauthor << "\n";
    file << year << "\n";
    file << month << "\n";
    file << day << "\n";
    file << fee << "\n";
    file << days << "\n";
    file.close();

    cout << "\n Your file has been saved successfully!";
    getchar();
    getchar();
}

void deleteBook()
{
    int bookId;
    cout << "\n========================================== Delete a Book ==========================================";
    cout << "\n\n Please enter the book ID to delete: ";
    cin >> bookId;

    char filename[20];
    sprintf(filename, "%d%s", bookId, ".dat");

    if (remove(filename) == 0)
        cout << "\n Book with ID " << bookId << " has been deleted successfully!";
    else
        cout << "\n Error: Failed to delete the book.";

    getchar();
    getchar();
}

void updateBook()
{
    int bookId;
    cout << "\n========================================== Update a Book ==========================================";
    cout << "\n\n Please enter the book ID to update: ";
    cin >> bookId;

    char filename[20];
    sprintf(filename, "%d%s", bookId, ".dat");

    ifstream file(filename);
    if (!file)
    {
        cout << "\n Error: Book with ID " << bookId << " does not exist.";
        getchar();
        getchar();
        return;
    }

    // Read the existing book information
    string bookName, bookAuthor;
    int year, month, day, fee, days;
    getline(file, bookName);
    getline(file, bookAuthor);
    file >> year >> month >> day;
    file >> fee >> days;
    file.close();

    // Display the existing information and prompt for updates
    cout << "\n Existing Book Information:";
    cout << "\n ID: " << bookId;
    cout << "\n Name: " << bookName;
    cout << "\n Author: " << bookAuthor;
    cout << "\n Date Added: " << year << "-" << month << "-" << day;
    cout << "\n Late Fee per Day: $" << fee;
    cout << "\n Maximum Borrowing Duration: " << days << " days";

    // Prompt for updated information
    string newBookName, newBookAuthor;
    int newFee, newDays;
    cout << "\n\n Enter the updated book name: ";
    cin.ignore();
    getline(cin, newBookName);
    cout << "\n Enter the updated book author: ";
    getline(cin, newBookAuthor);
    cout << "\n Enter the updated late fee per day (in dollars): ";
    cin >> newFee;
    cout << "\n Enter the updated maximum borrowing duration (in days): ";
    cin >> newDays;

    // Update the book information in the file
    ofstream outFile(filename);
    outFile << newBookName << "\n";
    outFile << newBookAuthor << "\n";
    outFile << year << "\n";
    outFile << month << "\n";
    outFile << day << "\n";
    outFile << newFee << "\n";
    outFile << newDays << "\n";
    outFile.close();

    cout << "\n Book with ID " << bookId << " has been updated successfully!";
    getchar();
    getchar();
}

void listOfAllBooks()
{
    cout << "\n========================================== List of All Books ==========================================";
    ifstream file;
    for (int bookId = 0; bookId <= 9999; ++bookId)
    {
        char filename[20];
        sprintf(filename, "%d%s", bookId, ".dat");

        file.open(filename);
        if (file)
        {
            string bookName, bookAuthor;
            int year, month, day, fee, days;

            getline(file, bookName);
            getline(file, bookAuthor);
            file >> year >> month >> day;
            file >> fee >> days;
            file.close();

            cout << "\n ID: " << bookId;
            cout << "\n Name: " << bookName;
            cout << "\n Author: " << bookAuthor;
            cout << "\n Date Added: " << year << "-" << month << "-" << day;
            cout << "\n Late Fee per Day: $" << fee;
            cout << "\n Maximum Borrowing Duration: " << days << " days";
            cout << "\n";

            // Check if the book is currently borrowed
            time_t t = time(NULL);
            struct tm* tm = localtime(&t);
            int currentYear = tm->tm_year + 1900;
            int currentMonth = tm->tm_mon + 1;
            int currentDay = tm->tm_mday;

            if (year <= currentYear && month <= currentMonth && day <= currentDay)
            {
                int daysPassed = (currentYear - year) * 365 + (currentMonth - month) * 30 + (currentDay - day);
                int lateFee = daysPassed * fee;
                cout << "\n Late Fee: $" << lateFee;
            }
            else
            {
                cout << "\n Not currently borrowed";
            }
        }
    }

    cout << "\n End of Book List";
    getchar();
    getchar();
}

void borrowBook()
{
    int bookId;
    cout << "\n========================================== Borrow a Book ==========================================";
    cout << "\n\n Please enter the book ID to borrow: ";
    cin >> bookId;

    char filename[20];
    sprintf(filename, "%d%s", bookId, ".dat");

    ifstream file(filename);
    if (!file)
    {
        cout << "\n Error: Book with ID " << bookId << " does not exist.";
        getchar();
        getchar();
        return;
    }

    // Read the existing book information
    string bookName, bookAuthor;
    int year, month, day, fee, days;
    getline(file, bookName);
    getline(file, bookAuthor);
    file >> year >> month >> day;
    file >> fee >> days;
    file.close();

    // Display the book information
    cout << "\n Book Information:";
    cout << "\n ID: " << bookId;
    cout << "\n Name: " << bookName;
    cout << "\n Author: " << bookAuthor;
    cout << "\n Date Added: " << year << "-" << month << "-" << day;
    cout << "\n Late Fee per Day: $" << fee;
    cout << "\n Maximum Borrowing Duration: " << days << " days";

    // Check if the book is currently borrowed
    time_t t = time(NULL);
    struct tm* tm = localtime(&t);
    int currentYear = tm->tm_year + 1900;
    int currentMonth = tm->tm_mon + 1;
    int currentDay = tm->tm_mday;

    if (year <= currentYear && month <= currentMonth && day <= currentDay)
    {
        int daysPassed = (currentYear - year) * 365 + (currentMonth - month) * 30 + (currentDay - day);
        int lateFee = daysPassed * fee;
        cout << "\n Late Fee: $" << lateFee;
    }
    else
    {
        cout << "\n Not currently borrowed";
    }

    // Check if the book can be borrowed
    bool canBorrow = true;

    if (year >= currentYear && month >= currentMonth && day >= currentDay)
    {
        cout << "\n\n Error: This book cannot be borrowed at the moment.";
        canBorrow = false;
    }

    // Prompt for student information if book can be borrowed
    if (canBorrow)
    {
        string studentName;
        int studentId;
        cout << "\n\n Enter your name: ";
        cin.ignore();
        getline(cin, studentName);
        cout << "\n Enter your ID: ";
        cin >> studentId;

        // Save the borrow information to a file
        char borrowFile[20];
        sprintf(borrowFile, "%d%s", bookId, "_borrow.dat");
        ofstream outFile(borrowFile);
        outFile << studentName << "\n";
        outFile << studentId << "\n";
        outFile << currentYear << "\n";
        outFile << currentMonth << "\n";
        outFile << currentDay << "\n";
        outFile.close();

        cout << "\n Book with ID " << bookId << " has been borrowed successfully!";
    }

    getchar();
    getchar();
}

void returnBook()
{
    int bookId;
    cout << "\n========================================== Return a Book ==========================================";
    cout << "\n\n Please enter the book ID to return: ";
    cin >> bookId;

    char borrowFile[20];
    sprintf(borrowFile, "%d%s", bookId, "_borrow.dat");

    ifstream file(borrowFile);
    if (!file)
    {
        cout << "\n Error: Book with ID " << bookId << " is not currently borrowed.";
        getchar();
getchar();
        return;
    }

    // Read the borrow information
    string studentName;
    int studentId, year, month, day;
    getline(file, studentName);
    file >> studentId >> year >> month >> day;
    file.close();

    // Display the borrow information
    cout << "\n Borrow Information:";
    cout << "\n Book ID: " << bookId;
    cout << "\n Student Name: " << studentName;
    cout << "\n Student ID: " << studentId;
    cout << "\n Date Borrowed: " << year << "-" << month << "-" << day;

    // Calculate the days borrowed
    time_t t = time(NULL);
    struct tm* tm = localtime(&t);
    int currentYear = tm->tm_year + 1900;
    int currentMonth = tm->tm_mon + 1;
    int currentDay = tm->tm_mday;

    int daysBorrowed = (currentYear - year) * 365 + (currentMonth - month) * 30 + (currentDay - day);
    cout << "\n Number of Days Borrowed: " << daysBorrowed;

    // Check if the book is overdue
    char bookFile[20];
    sprintf(bookFile, "%d%s", bookId, ".dat");
    ifstream book(bookFile);
    int bookYear, bookMonth, bookDay, fee, maxDays;
    string bookName, bookAuthor;
    getline(book, bookName);
    getline(book, bookAuthor);
    book >> bookYear >> bookMonth >> bookDay;
    book >> fee >> maxDays;
    book.close();

    bool isOverdue = false;
    if (currentYear > bookYear || (currentYear == bookYear && currentMonth > bookMonth) || (currentYear == bookYear && currentMonth == bookMonth && currentDay > bookDay))
    {
        isOverdue = true;
    }

    // Calculate the late fee
    int lateFee = 0;
    if (isOverdue)
    {
        lateFee = (daysBorrowed - maxDays) * fee;
        cout << "\n Late Fee: $" << lateFee;
    }
    else
    {
        cout << "\n Not overdue";
    }

    // Prompt for return confirmation
    char confirm;
    cout << "\n\n Are you sure you want to return this book? (Y/N): ";
    cin >> confirm;

    if (confirm == 'Y' || confirm == 'y')
    {
        // Remove the borrow file
        if (remove(borrowFile) == 0)
        {
            cout << "\n Book with ID " << bookId << " has been returned successfully!";
            if (lateFee > 0)
            {
                cout << "\n Please pay the late fee of $" << lateFee;
            }
        }
        else
        {
            cout << "\n Error: Failed to return the book.";
        }
    }
    else
    {
        cout << "\n Book return has been canceled.";
    }

    getchar();
    getchar();
}

bool authenticateAdmin()
{
    string username, password;
    cout << "\n========================================== Admin Login ==========================================";
    cout << "\n\n Please enter your username: ";
    cin >> username;
    cout << "\n Please enter your password: ";
    cin >> password;

    // Check if the username and password match the admin credentials
    if (username == "admin" && password == "admin123")
    {
        cout << "\n\n Login Successful! Press any key to continue..";
        getchar();
        getchar();
        return true;
    }
    else
    {
        return false;
    }
}

int main()
{
    cout << "Welcome to the Library Management System!";
    bool isAdmin = authenticateAdmin();

    while (true)
    {
        system("clear");
        cout << "\n========================================== Library Management System ==========================================";
        cout << "\n";
        cout << "\n 1. Add a Book";
        cout << "\n 2. Edit Book Information";
        cout << "\n 3. List All Books";
        cout << "\n 4. Borrow a Book";
        cout << "\n 5. Return a Book";
        cout << "\n 6. Exit";
        cout << "\n";
        cout << "\n==============================================================================================================";
        cout << "\n\n Please enter your choice: ";

        int choice;
        cin >> choice;

        switch (choice)
        {
        case 1:
            if (isAdmin)
            {
                addBook();
            }
            else
            {
                cout << "\n Error: You are not authorized to perform this action.";
                getchar();
                getchar();
            }
            break;
        case 2:
            if (isAdmin)
            {
                editBook();
            }
            else
            {
                cout << "\n Error: You are not authorized to perform this action.";
                getchar();
                getchar();
            }
            break;
        case 3:
            listOfAllBooks();
            break;
        case 4:
            borrowBook();
            break;
        case 5:
            returnBook();
            break;
        case 6:
            cout << "\n Thank you for using the Library Management System. Goodbye!";
            getchar();
            getchar();
            return 0;
        default:
            cout << "\n Error: Invalid choice. Please try again.";
            getchar();
            getchar();
        }
    }
    return 0;
}
